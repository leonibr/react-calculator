{"version":3,"sources":["serviceWorker.ts","model/AppKeyType.ts","Keyboard/index.tsx","Display/index.tsx","Util/roundIt.ts","model/percentOperation.ts","model/nullOperation.ts","model/History.ts","model/allClearOperation.ts","Calculator/BeepSound.ts","model/Key.ts","model/addOperation.ts","model/subtractOperation.ts","model/multiplyOperation.ts","model/divisionOperation.ts","Calculator/CalculatorController.ts","Calculator/index.tsx","GitLogo.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AppKeyType","Keyboard","props","state","keyboard","mountedClass","item","css","readResult","pressedKey","className","this","map","index","key","onClick","onPressed","caption","Component","Display","displayText","roundId","value","Math","round","percentOperation","history","memory","entry","console","log","percent","updateEntry","nullOperation","p","equalOperation","HistoryApp","_entry","_memory","_isDecimal","parseNum","_value","hasDot","indexOf","Number","parseFloat","isNumber","isNaN","isFinite","newEntry","keyType","parsedKey","isDecimal","toString","parseInt","newMemory","v","allClearOperation","BeepSound","Audio","Key","_caption","_keyType","_span","operation","bgTheme","inform","Error","span","columnSpan","bg","Operation","undefined","addOperation","result","setMemory","clearEntry","subtractOperation","multiplyOperation","n1","n2","divisionOperation","CalculatorController","keys","currentOperation","reRender","loadKeys","stringKeys","split","k","label","tempKey","filter","c","length","fromOperation","fromNumber","hasOperationDefined","t","setTimeout","play","then","_","clearTimeout","beep","updateEntryFromKey","_display","_displayStr","_dot","intPartLength","decPartLength","sIntPart","sDecPart","first","substring","second","Calculator","controller","forceUpdate","display","handleIncomingKey","GitLogo","s","size","xmlns","width","height","viewBox","d","App","href","target","rel","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ddd2c39.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\n\r\nexport enum AppKeyType {\r\n    Number,\r\n    Operation\r\n}","import React, { Component } from 'react';\r\n\r\nimport './keyboard.scss';\r\nimport Key from '../model/Key';\r\n\r\n\r\n\r\n\r\ntype KeyboarProps = {\r\n    pressedKey: (key: Key) => void\r\n    keyboard: Key[]\r\n}\r\n\r\n\r\ntype KeyboardState = {\r\n\r\n}\r\n\r\nexport default class Keyboard extends Component<KeyboarProps, KeyboardState>{\r\n\r\n\r\n    constructor(props: KeyboarProps, state: KeyboardState) {\r\n        super(props, state);\r\n        this.keyboard = this.props.keyboard;        \r\n        \r\n    }\r\n        \r\n    keyboard: Key[] = [];\r\n\r\n\r\n\r\n    mountedClass = (item: Key) => (item.css);\r\n\r\n\r\n    readResult = (pressedKey : Key ) => {\r\n        this.props.pressedKey(pressedKey);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"keyboard-container\">\r\n                <div className=\"keyboard\">\r\n                    {this\r\n                    .keyboard\r\n                    .map((item: Key, index) => \r\n                    (<div key={index} onClick={() => item.onPressed(this.readResult)} className={this.mountedClass(item)}><span>{item.caption}</span></div>))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport './Display.scss';\r\n\r\ntype DisplayProps = {\r\n    displayText: string\r\n};\r\n\r\nexport default class Display extends Component<DisplayProps> {\r\n\r\n\r\n    render() {\r\n        const { displayText } = this.props;\r\n        return (\r\n            <div className=\"display-container\">\r\n                <span>{displayText}</span>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","\r\nexport const roundId = (value: number) => {\r\n    return  Math.round(value * 1000000000000 )/ 1000000000000;\r\n}","import { roundId } from './../Util/roundIt';\r\nimport { PerformOperationType } from './PerformOperationType';\r\n\r\nexport const percentOperation: PerformOperationType = (history) => {\r\n   const { memory, entry }  = history;\r\n   console.log('percentOperation: [memory, entry]' , [memory, entry] );\r\n   if (memory !== 0 && entry !== null) {\r\n      \r\n        const percent = roundId((entry / 100) * memory);\r\n        history.updateEntry(percent);\r\n   }\r\n\r\n\r\n\r\n    return history;\r\n}","import { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const nullOperation: PerformOperationType = (p) => p;\r\nexport const equalOperation: PerformOperationType = (history) => {\r\n    return history;\r\n};\r\n","import Key from \"./Key\";\r\nimport { AppKeyType } from \"./AppKeyType\";\r\n\r\n\r\nexport default class HistoryApp {\r\n    private _entry: number | null = null;\r\n    private _memory: number = 0;\r\n    private _isDecimal: boolean = false;\r\n    public get memory(): number {\r\n        return this._memory;\r\n    }\r\n    public get entry(): number | null {\r\n        return this._entry;\r\n    }\r\n    public get isDecimal(): boolean {\r\n        return this._isDecimal;\r\n    }\r\n    public set isDecimal(v: boolean) {\r\n        this._isDecimal = v;\r\n    }\r\n    reset(): void {\r\n        this._memory = 0;\r\n        this._isDecimal = false;\r\n        this._entry = null;\r\n    }\r\n    updateEntry(newEntry: number): void {\r\n        this._entry = newEntry;\r\n    }\r\n\r\n    /**\r\n     * Receives a key and update the entry\r\n     * @param key The key to update the memory entry.\r\n     */\r\n    updateEntryFromKey(key: Key): boolean {\r\n        if (key.keyType === AppKeyType.Number) {\r\n            const parsedKey = this.parseNum(key.caption);\r\n\r\n\r\n            if (this.entry) {\r\n\r\n                if (this.isDecimal\r\n                    && (parseFloat(this.entry.toString()) === parseInt(this.entry.toString()))) {\r\n                    const newEntry = this.parseNum(`${this.entry}.${parsedKey.value}`);\r\n                    this.updateEntry(newEntry.value);\r\n                } else {\r\n\r\n                    const newEntry = this.parseNum(`${this.entry}${parsedKey.value}`);\r\n                    this.updateEntry(newEntry.value);\r\n                    if (key.caption === '.') \r\n                        this.isDecimal = true;\r\n                }\r\n\r\n            } else {\r\n                const newEntry = this.parseNum(`${parsedKey.value}`);\r\n                this.isDecimal = false;\r\n                this.updateEntry(newEntry.value);\r\n            }\r\n\r\n\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    setMemory(newMemory: number): void {\r\n        this._memory = newMemory;\r\n    }\r\n\r\n    clearEntry() {\r\n        this._entry = null;\r\n        this._isDecimal = false;\r\n    }\r\n\r\n\r\n    parseNum = (_value: string) => {\r\n        const hasDot = _value.indexOf('.') > 0;\r\n        const value = Number.parseFloat(_value);\r\n        const isNumber = !isNaN(value) && isFinite(value)\r\n        return {\r\n            value,\r\n            isNumber,\r\n            hasDot\r\n        }\r\n    }\r\n\r\n}","\r\nimport { PerformOperationType } from './PerformOperationType';\r\nimport HistoryApp from './History';\r\n\r\n\r\nexport const allClearOperation: PerformOperationType = (history) => {\r\n    history = new HistoryApp();\r\n    return history;\r\n}","\r\n\r\n    export const BeepSound = new Audio(\"data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");  \r\n","import { AppKeyType } from \"./AppKeyType\";\r\nimport { PerformOperationType } from \"./PerformOperationType\";\r\n\r\n\r\nexport default class Key {\r\n\r\n\r\n\r\n    public bgTheme: 'bg-organge' |  '' = '';\r\n\r\n    public get caption(): string {\r\n        return this._caption;\r\n    }\r\n\r\n    //\r\n    public get keyType(): AppKeyType {\r\n        return this._keyType;\r\n    }\r\n\r\n    //** Indicates how many columns this key ocupies in the keyboard. */\r\n    public get columnSpan(): number {\r\n        return this._span;\r\n    }\r\n\r\n    public get css(): string {\r\n        const span = this.columnSpan === 1? 'key': 'key unit-2';\r\n        const bg = this.bgTheme;\r\n        return `${span} ${bg}` \r\n    }\r\n\r\n    public get hasOperationDefined(): boolean {\r\n        return this._keyType === AppKeyType.Operation && this.operation !== null;\r\n    }\r\n\r\n\r\n    onPressed(inform: (pressedKey: Key) => void) {\r\n        if (inform) {\r\n            inform(this as Key);\r\n            return;\r\n        }\r\n        throw new Error('Callback not set for this key: ' + this._caption);\r\n\r\n    }\r\n\r\n    constructor(private _caption: string, private _keyType: AppKeyType, private _span: number = 1,\r\n        public operation?: PerformOperationType) {\r\n\r\n\r\n    }\r\n\r\n    toString() {\r\n        return `${this.caption} Type: ${this.keyType} span: ${this.columnSpan}`;\r\n    }\r\n    static fromNumber(caption: string, span: number = 1): Key {\r\n        return new Key(caption, AppKeyType.Number, span);\r\n    }\r\n\r\n    static fromOperation(caption: string, span: number = 1, operation: PerformOperationType): Key {\r\n        if (operation === null || operation === undefined) {\r\n            throw new Error(`Key ${caption} is set as 'AppKeyType.Operation' but no operation was defined.`);           \r\n        }\r\n        return new Key(caption, AppKeyType.Operation, span, operation);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","import { PerformOperationType } from './PerformOperationType';\r\nimport HistoryApp from './History';\r\n\r\n\r\n// export const addOperation: PerformOperationType = (first: number, second: number | null) => {\r\n//     if (second === null) second = 0;\r\n//     return first + second;\r\n// }\r\n\r\nexport const addOperation: PerformOperationType = (history: HistoryApp) => {\r\n    const n1 = history.memory;\r\n    const n2 = history.entry ? history.entry : 0;\r\n    const result = n1 + n2;\r\n    history.setMemory(result);\r\n    history.clearEntry();\r\n    return history;\r\n}","import { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const subtractOperation: PerformOperationType = (history) => {\r\n  const n1 = history.memory;\r\n  const n2 = history.entry ? history.entry : 0;\r\n  const result = n1 - n2;\r\n  history.setMemory(result);\r\n  history.clearEntry();\r\n  return history;\r\n}","import { roundId } from './../Util/roundIt';\r\nimport { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const multiplyOperation: PerformOperationType =\r\n    (history) => {\r\n        const n1 = history.memory;\r\n        const n2 = history.entry ? history.entry : 1;\r\n        const result = roundId(n1 * n2);\r\n                \r\n        history.setMemory(result);\r\n        history.clearEntry();\r\n        return history;\r\n    }","import { roundId } from './../Util/roundIt';\r\n\r\nimport { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const divisionOperation: PerformOperationType = (history) => {\r\n    const n1 = history.memory;\r\n    const n2 = history.entry ? history.entry : 1;\r\n    const result = roundId(n1 / n2);\r\n    history.setMemory(result);\r\n    history.clearEntry();\r\n    return history;\r\n}","import { percentOperation } from './../model/percentOperation';\r\nimport { nullOperation, equalOperation } from './../model/nullOperation';\r\nimport { allClearOperation } from './../model/allClearOperation';\r\nimport { PerformOperationType } from './../model/PerformOperationType';\r\nimport { BeepSound } from './BeepSound';\r\nimport { setTimeout } from 'timers';\r\nimport Key from '../model/Key';\r\nimport { addOperation } from '../model/addOperation';\r\nimport { subtractOperation } from '../model/subtractOperation';\r\nimport { multiplyOperation } from '../model/multiplyOperation';\r\nimport { divisionOperation } from '../model/divisionOperation';\r\nimport HistoryApp from '../model/History';\r\nimport { AppKeyType } from '../model/AppKeyType';\r\n\r\n\r\n\r\nexport default class CalculatorController {\r\n\r\n    keys: Key[] = [];\r\n    history = new HistoryApp();\r\n\r\n    private currentOperation: PerformOperationType = nullOperation;\r\n\r\n    constructor() {\r\n        this.loadKeys();\r\n    }\r\n\r\n\r\n    /**\r\n     * Callback to inform the UI to re-render, it needs to be informed by the YI\r\n     */\r\n    reRender: () => void = () => null;\r\n\r\n    /**\r\n    * Method to populate the keys: Array<Key>            \r\n    * */\r\n    private loadKeys() {\r\n\r\n        const isOps = ((key: string) => ['AC', '/', 'x', '-', '+', '=', '%'].filter(c => c === key).length === 1);\r\n        const stringKeys = 'AC:2;%;/;7;8;9;x;4;5;6;-;1;2;3;+;0:2;.;='.split(';');\r\n        this.keys = stringKeys.map((k) => {\r\n            const span = k.indexOf(':') > 0 ? +k.split(':')[1] : 1;\r\n            const label = k.indexOf(':') > 0 ? k.split(':')[0] : k;\r\n\r\n            const operation = (key: string) => {\r\n                if (key === '+') return addOperation;\r\n                if (key === '%') return percentOperation;\r\n                if (key === '-') return subtractOperation;\r\n                if (key === 'x') return multiplyOperation;\r\n                if (key === '/') return divisionOperation;\r\n                if (key === 'AC') return allClearOperation;\r\n                if (key === '=') return equalOperation;\r\n                throw new Error('Key not found for this operation');\r\n\r\n            }\r\n\r\n            const tempKey = isOps(label) ? Key.fromOperation(label, span, operation(label)) : Key.fromNumber(label, span);\r\n\r\n            if (tempKey.hasOperationDefined && tempKey.caption !== '%') {\r\n                tempKey.bgTheme = 'bg-organge';\r\n            }   \r\n           \r\n            return tempKey;\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Emmits a beep sound when executed\r\n     */\r\n    private beep() {\r\n        const t = setTimeout(() => {\r\n            BeepSound.play().then(_ => clearTimeout(t));\r\n        }, 5);\r\n    }\r\n\r\n\r\n    public get display() {\r\n\r\n        const _display = this.history.entry ? this.history.entry : this.history.memory;\r\n        const _displayStr = _display.toString();\r\n        const _dot = this.history.isDecimal && _display.toString().indexOf('.') === -1 ? '.' : '';\r\n\r\n        const intPartLength = _displayStr.split('.')[0].length;\r\n        let decPartLength = 0;\r\n        if (_display.toString().indexOf('.') >= 0) {\r\n            decPartLength = _displayStr.split('.')[1].length;\r\n        }\r\n        // console.log('int part' ,  intPartLength);\r\n        // console.log('dec part' ,  decPartLength);\r\n\r\n        let result = `${_display}${_dot}`;\r\n\r\n        if (intPartLength > 8 && decPartLength > 3) {\r\n            const sIntPart = _displayStr.split('.')[0];\r\n            const sDecPart = _displayStr.split('.')[1];\r\n            const first = sIntPart.substring(0, 1);\r\n            const second = (sIntPart.substring(1, sIntPart.length) + sDecPart).substring(0, 9);\r\n\r\n\r\n            result = `${first}.${second}e${intPartLength - 1}`\r\n        }\r\n\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    handleIncomingKey(key: Key) {\r\n        this.beep();\r\n        switch (key.keyType) {\r\n\r\n            case AppKeyType.Operation:\r\n\r\n                switch (key.operation) {\r\n                    case allClearOperation:\r\n                        this.currentOperation = nullOperation;\r\n                        this.history = allClearOperation(this.history);\r\n                        this.reRender();\r\n                        return;\r\n                    case percentOperation:\r\n\r\n                        this.history = percentOperation(this.history);\r\n                        this.reRender();\r\n                        return;\r\n\r\n\r\n                    case addOperation:\r\n                    case subtractOperation:\r\n                    case multiplyOperation:\r\n                    case divisionOperation:\r\n                        this.history = this.currentOperation(this.history);\r\n                        if (this.history.entry) {\r\n                            this.history.setMemory(this.history.entry);\r\n                            this.history.clearEntry();\r\n                        }\r\n\r\n                        break;\r\n                    case equalOperation:\r\n                        this.history = this.currentOperation(this.history);\r\n\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                this.currentOperation = key.operation ? key.operation : equalOperation;\r\n                break;\r\n            case AppKeyType.Number:\r\n                this.history.updateEntryFromKey(key);\r\n                break;\r\n            default:\r\n\r\n                break;\r\n        }\r\n        this.reRender();\r\n    } \r\n}\r\n","import React, { Component } from \"react\";\r\nimport Keyboard from \"../Keyboard\";\r\nimport Display from \"../Display\";\r\nimport Key from \"../model/Key\";\r\nimport CalculatorController from \"./CalculatorController\";\r\n\r\n\r\nexport default class Calculator extends Component {\r\n    controller = new CalculatorController();\r\n\r\n\r\n    render() {\r\n    this.controller.reRender =  () => this.forceUpdate();\r\n        return (\r\n            <div>\r\n                <Display displayText={this.controller.display} />\r\n                <Keyboard keyboard={this.controller.keys}  pressedKey={(key: Key) => this.controller.handleIncomingKey(key)}  />\r\n            </div>);\r\n    }\r\n}","import React from 'react';\r\n// Github logo\r\ntype LogoSize = {\r\n    size: number\r\n};\r\n\r\nexport const GitLogo: React.FC<LogoSize> = (props: LogoSize) =>  {\r\n    const s = props.size;\r\n    return (<svg xmlns=\"http://www.w3.org/2000/svg\" width={s} height={s} viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\r\n    );\r\n}","import React, { Fragment } from 'react';\n\nimport './App.scss';\nimport Calculator from './Calculator';\nimport { GitLogo } from './GitLogo';\n\nfunction App() {\n  return (\n    <Fragment>\n      <div className=\"app-header\">\n        <label>React Calculator</label>\n        \n        <label>\n        <a href=\"https://github.com/leonibr/react-calculator\" target=\"_blank\"  rel=\"noopener noreferrer\">\n          <GitLogo size={18}/> Source Code</a></label>\n      </div>\n      <div className=\"app-container\">       \n      <p></p>\n      <p>Simple Calculator program to learn react using typescript.</p>\n      \n        <Calculator></Calculator>\n        Source code available on Github\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}