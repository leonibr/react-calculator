{"version":3,"sources":["serviceWorker.ts","model/AppKeyType.ts","Keyboard/index.tsx","Display/index.tsx","model/allClearOperation.ts","Calculator/BeepSound.ts","model/Key.ts","model/addOperation.ts","model/subtractOperation.ts","model/multiplyOperation.ts","model/divisionOperation.ts","model/History.ts","Calculator/CalculatorController.ts","Calculator/index.tsx","GitLogo.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","AppKeyType","Keyboard","keyboard","mountedClass","item","span","keyType","Operation","readResult","pressedKey","props","this","className","map","index","key","onClick","onPressed","caption","Component","Display","displayText","allClearOperation","_","__","BeepSound","Audio","Key","_caption","_keyType","_span","performOperation","executeOperation","n1","n2","_n2","inform","Error","Number","operation","addOperation","first","second","subtractOperation","multiplyOperation","divisionOperation","HistoryApp","_entry","_memory","_isDecimal","newEntry","newMemory","v","nullOperation","p","CalculatorController","keys","history","currentOperation","update","parseNum","_value","hasDot","indexOf","value","parseFloat","isNumber","isNaN","receiveKey","beep","memory","entry","percent","updateEntry","reset","parse","isDecimal","toString","parseInt","length","console","log","result","Math","round","undefined","setMemory","clearEntry","loadKeys","stringKeys","split","k","label","filter","c","fromOperation","fromNumber","t","setTimeout","play","then","clearTimeout","_display","_displayStr","_dot","intPartLength","decPartLength","sIntPart","sDecPart","substring","Calculator","controller","forceUpdate","display","GitLogo","s","size","xmlns","width","height","viewBox","d","App","href","target","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.06356e6f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\n\r\nexport enum AppKeyType {\r\n    Number,\r\n    Operation\r\n}","import React, { Component } from 'react';\r\n\r\nimport './keyboard.scss';\r\nimport { AppKeyType } from '../model/AppKeyType';\r\nimport Key from '../model/Key';\r\nimport { addOperation } from '../model/addOperation';\r\nimport { subtractOperation } from '../model/subtractOperation';\r\nimport { multiplyOperation } from '../model/multiplyOperation';\r\nimport { divisionOperation } from '../model/divisionOperation';\r\nimport { allClearOperation } from '../model/allClearOperation';\r\n\r\n\r\n\r\ntype KeyboarProps = {\r\n    pressedKey: (key: Key) => void\r\n    keyboard: Key[]\r\n}\r\n\r\n\r\ntype KeyboardState = {\r\n\r\n}\r\n\r\nexport default class Keyboard extends Component<KeyboarProps, KeyboardState>{\r\n\r\n        \r\n    keyboard: Key[] = [];\r\n\r\n    componentWillMount() {\r\n        this.keyboard = this.props.keyboard;\r\n    }\r\n\r\n    mountedClass = (item: Key) => \r\n    (item.span === 1? 'key': 'key unit-2')\r\n      + (item.keyType === AppKeyType.Operation ? ' operation' :  '');\r\n\r\n    readResult = (pressedKey : Key ) => {\r\n        this.props.pressedKey(pressedKey);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"keyboard-container\">\r\n                <div className=\"keyboard\">\r\n                    {this\r\n                    .keyboard\r\n                    .map((item: Key, index) => \r\n                    (<div key={index} onClick={() => item.onPressed(this.readResult)} className={this.mountedClass(item)}><span>{item.caption}</span></div>))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport './Display.scss';\r\n\r\ntype DisplayProps = {\r\n    displayText: string\r\n};\r\n\r\nexport default class Display extends Component<DisplayProps> {\r\n\r\n\r\n    render() {\r\n        const { displayText } = this.props;\r\n        return (\r\n            <div className=\"display-container\">\r\n                <span>{displayText}</span>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","\r\nimport { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const allClearOperation: PerformOperationType = (_, __) => {\r\n    return 0.0;\r\n}","\r\n\r\n    export const BeepSound = new Audio(\"data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");  \r\n","import { AppKeyType } from \"./AppKeyType\";\r\nimport { PerformOperationType } from \"./PerformOperationType\";\r\n\r\n\r\nexport default class Key {\r\n \r\n    \r\n    public get caption(): string {\r\n        return this._caption;\r\n    }\r\n\r\n    public get keyType(): AppKeyType  {\r\n        return this._keyType;\r\n    }   \r\n\r\n    public get span() : number {\r\n        return this._span;\r\n    }      \r\n\r\n\r\n    \r\n    onPressed(inform: (pressedKey: Key) => void) {\r\n        if (inform) {\r\n            inform(this as Key);\r\n            return;\r\n        }\r\n        throw new Error('Callback not set for this key: ' + this._caption);\r\n        \r\n    }\r\n\r\n   constructor(private _caption: string, private _keyType: AppKeyType, private _span: number = 1, \r\n    private performOperation?: PerformOperationType) {\r\n   \r\n\r\n   }\r\n\r\n   toString() {\r\n       return `${this.caption} Type: ${this.keyType} span: ${this.span}`;\r\n   }\r\n   static fromNumber(caption: string, span: number = 1): Key {\r\n    return new Key(caption, AppKeyType.Number, span);\r\n   }\r\n\r\n   static fromOperation(caption: string, span: number = 1, operation: PerformOperationType | undefined): Key {\r\n    return new Key(caption, AppKeyType.Operation, span, operation);\r\n   }\r\n\r\n   executeOperation: PerformOperationType = (n1: number, n2: number | null) => {\r\n       if (this.performOperation) {\r\n           let _n2 = 0;\r\n           if (n2 !== null){\r\n             _n2 = n2;\r\n           }\r\n           return this.performOperation(n1, _n2);\r\n       }\r\n       return undefined;\r\n   }\r\n\r\n\r\n\r\n}","import { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const addOperation: PerformOperationType = (first: number, second: number | null) => {\r\n    if (second === null) second = 0;\r\n    return first + second;\r\n}","\r\n\r\nimport { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const subtractOperation: PerformOperationType = (first: number, second: number | null) => {\r\n    if (second === null) second = 0;\r\n    return first - second;\r\n}","import { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const multiplyOperation: PerformOperationType =\r\n    (first: number, second: number | null) => {\r\n        if (second === null) second = 1;\r\n        return first * second;\r\n    }","\r\nimport { PerformOperationType } from './PerformOperationType';\r\n\r\n\r\nexport const divisionOperation: PerformOperationType = (first: number, second: number | null) => {\r\n    if (second === null) second = 1;\r\n    return first / second;\r\n}","\r\n\r\nexport default class HistoryApp {\r\n    private _entry: number | null = null;\r\n    private _memory: number = 0;\r\n    private _isDecimal: boolean | null = null;\r\n    public get memory() : number {\r\n        return this._memory;\r\n    }\r\n    public get entry(): number | null {\r\n        return this._entry;\r\n    }\r\n    public get isDecimal(): boolean | null {\r\n        return this._isDecimal;\r\n    }\r\n    public set isDecimal(v: boolean | null) {\r\n        this._isDecimal = v;\r\n    }\r\n    reset(): void {\r\n        this._memory = 0;\r\n        this._isDecimal = null;\r\n        this._entry = null;\r\n    }\r\n    updateEntry(newEntry: number): void {\r\n        this._entry = newEntry;\r\n    }\r\n    setMemory(newMemory: number): void {\r\n        this._memory = newMemory;\r\n    }\r\n\r\n    clearEntry() {\r\n        this._entry = null;\r\n        this._isDecimal = null;\r\n    }\r\n\r\n}","import { allClearOperation } from './../model/allClearOperation';\r\nimport { PerformOperationType } from './../model/PerformOperationType';\r\nimport { BeepSound } from './BeepSound';\r\nimport { setTimeout } from 'timers';\r\nimport Key from '../model/Key';\r\nimport { addOperation } from '../model/addOperation';\r\nimport { subtractOperation } from '../model/subtractOperation';\r\nimport { multiplyOperation } from '../model/multiplyOperation';\r\nimport { divisionOperation } from '../model/divisionOperation';\r\nimport HistoryApp from '../model/History';\r\n\r\nconst nullOperation: PerformOperationType = (p, __) => p;\r\n\r\nexport default class CalculatorController {\r\n\r\n    keys: Key[] = []\r\n    history= new HistoryApp();\r\n        \r\n    \r\n    private currentOperation: PerformOperationType = nullOperation;\r\n\r\n    constructor() {\r\n        this.loadKeys();\r\n\r\n    }\r\n\r\n\r\n\r\n    update: () => void = () => null;\r\n\r\n\r\n    loadKeys() {\r\n\r\n        const isOps = ((key: string) => ['AC', '/', 'x', '-', '+', '='].filter(c => c === key).length === 1);\r\n        const stringKeys = 'AC:2;%;/;7;8;9;x;4;5;6;-;1;2;3;+;0:2;.;='.split(';');\r\n        this.keys = stringKeys.map((k) => {\r\n            const span = k.indexOf(':2') > 0 ? 2 : 1;\r\n            const label = k.indexOf(':') > 0 ? k.split(':')[0] : k;\r\n\r\n            const operation = (key: string) => {\r\n                if (key === '+') return addOperation;\r\n                if (key === '-') return subtractOperation;\r\n                if (key === 'x') return multiplyOperation;\r\n                if (key === '/') return divisionOperation;\r\n                if (key === 'AC') return allClearOperation;\r\n            }\r\n            const tempKey = isOps(label) ? Key.fromOperation(label, span, operation(label)) : Key.fromNumber(label, span);\r\n\r\n            return tempKey;\r\n        });\r\n    }\r\n\r\n\r\n\r\n    beep() {\r\n        const t = setTimeout(() => {\r\n            BeepSound.play().then(_ => clearTimeout(t));\r\n        }, 50);\r\n        console.log('beep()');\r\n    }\r\n\r\n\r\n    public get display() {\r\n\r\n        const _display = this.history.entry ? this.history.entry : this.history.memory;\r\n        const _displayStr = _display.toString();\r\n        console.log('display unformated: ', _displayStr)\r\n        const _dot = this.history.isDecimal && _display.toString().indexOf('.') === -1 ? '.' : '';\r\n        \r\n        const intPartLength = _displayStr.split('.')[0].length;\r\n        let decPartLength = 0;\r\n        if (_display.toString().indexOf('.') >= 0) {\r\n            decPartLength = _displayStr.split('.')[1].length;\r\n        }\r\n        // console.log('int part' ,  intPartLength);\r\n        // console.log('dec part' ,  decPartLength);\r\n\r\n        let result = `${_display}${_dot}`;\r\n\r\n        if (intPartLength > 8 && decPartLength > 3) {\r\n            const sIntPart = _displayStr.split('.')[0];\r\n            const sDecPart = _displayStr.split('.')[1];\r\n            const first = sIntPart.substring(0, 1);\r\n            const second = (sIntPart.substring(1, sIntPart.length) + sDecPart).substring(0, 9);\r\n\r\n\r\n            result = `${first}.${second}e${intPartLength  - 1}`\r\n        }\r\n        console.log('display formated: ', result)\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    parseNum = (_value: string) => {\r\n        const hasDot = _value.indexOf('.') > 0;\r\n        const value = Number.parseFloat(_value);\r\n        const isNumber = !isNaN(value)\r\n        return {\r\n            value,\r\n            isNumber,\r\n            hasDot\r\n        }\r\n    }\r\n\r\n    executeKey(key: Key) {\r\n        const parse = this.parseNum(key.caption);\r\n        if (parse.isNumber) {\r\n            key.executeOperation(this.history.memory, this.history.entry);\r\n        }\r\n    }\r\n\r\n    receiveKey = (key: Key) => {\r\n        this.beep();\r\n        if (key.caption === '%' && this.history.memory > 0 && this.history.entry) {\r\n            const percent = (this.history.entry / 100) * this.history.memory;\r\n            this.history.updateEntry(percent);\r\n            return;\r\n        }\r\n        if (key.caption === 'AC') {\r\n            this.history.reset();\r\n            this.currentOperation = nullOperation;\r\n            this.update();\r\n            return;\r\n        }\r\n        //this.beep();\r\n        //debugger;\r\n        let parse = this.parseNum(key.caption);\r\n        if (key.caption === '.') {\r\n            if (!parse.hasDot) {\r\n                this.history.isDecimal = true;\r\n            }\r\n            this.update();\r\n            return;\r\n        }\r\n        //this.executeKey(key);\r\n       \r\n        if (parse.isNumber) {\r\n\r\n            if (this.history.entry) {\r\n                if (this.history.isDecimal \r\n                        && (parseFloat(this.history.entry.toString()) === parseInt(this.history.entry.toString()))) {\r\n                    parse = this.parseNum(`${this.history.entry}.${parse.value}`);\r\n\r\n                } else {\r\n\r\n                    parse = this.parseNum(`${this.history.entry}${parse.value}`);\r\n                }\r\n\r\n            } else {\r\n                parse = this.parseNum(`${parse.value}`);\r\n                this.history.isDecimal = false;\r\n            }\r\n\r\n            const parseString = parse.value.toString();\r\n            if (parseString.length > 14) {\r\n                this.beep()\r\n                return;\r\n            }\r\n            this.history.updateEntry(parse.value);\r\n\r\n        }\r\n        if (!parse.isNumber) {\r\n            console.log('currentOperation is null', this.currentOperation === nullOperation)\r\n            let result = null;\r\n            if ((this.currentOperation !== nullOperation)) {\r\n                result = this.currentOperation(this.history.memory, this.history.entry);\r\n                if (result) {\r\n                   result = Math.round(result * 1000000000000 )/ 1000000000000;\r\n                }\r\n            } else {\r\n                result = this.history.entry;\r\n            }\r\n            this.currentOperation = key.executeOperation;\r\n            console.log('result', result);\r\n            if (result !== null && result !== undefined) {\r\n                this.history.setMemory(result);\r\n                this.history.clearEntry();            \r\n\r\n            }\r\n        }\r\n\r\n        this.update();\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Keyboard from \"../Keyboard\";\r\nimport Display from \"../Display\";\r\nimport Key from \"../model/Key\";\r\nimport CalculatorController from \"./CalculatorController\";\r\n\r\n\r\nexport default class Calculator extends Component {\r\n    controller = new CalculatorController();\r\n\r\n\r\n    render() {\r\n    this.controller.update =  () => this.forceUpdate();\r\n        return (\r\n            <div>\r\n                <Display displayText={this.controller.display} />\r\n                <Keyboard keyboard={this.controller.keys}  pressedKey={(key: Key) => this.controller.receiveKey(key)}  />\r\n            </div>);\r\n    }\r\n}","import React from 'react';\r\n// Github logo\r\ntype LogoSize = {\r\n    size: number\r\n};\r\n\r\nexport const GitLogo: React.FC<LogoSize> = (props: LogoSize) =>  {\r\n    const s = props.size;\r\n    return (<svg xmlns=\"http://www.w3.org/2000/svg\" width={s} height={s} viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\r\n    );\r\n}","import React, { Fragment } from 'react';\n\nimport './App.scss';\nimport Calculator from './Calculator';\nimport { GitLogo } from './GitLogo';\n\nfunction App() {\n  return (\n    <Fragment>\n      <div className=\"app-header\">\n        <label>React Calculator</label>\n        \n        <label>\n        <a href=\"https://github.com/leonibr/react-calculator\" target=\"_blank\">\n          <GitLogo size={18}/> Source Code</a></label>\n      </div>\n      <div className=\"app-container\">       \n      <p></p>\n      <p>Simple Calculator program to learn react using typescript.</p>\n      \n        <Calculator></Calculator>\n        Source code available on Github\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport Calculator from './Calculator';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}